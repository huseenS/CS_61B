/**
 * 
 */
package Lab2;

/**
 * @author Huseen Sufi
 *Doubly Linked List implementation, accepts generic object
 */
public class DList <T>{
	//empty sentinel Nodes that always point to first/last nodes 
	private DListNode header; //head sentinel
	private DListNode trailer; //tail sentinel
	private int size = 0; //size of node
		
	 //Nested inner DListNode class
		public class DListNode {
			private DListNode next; //next pointer
			private DListNode prev; //prev pointer 
			private T item; // generic Object
			
			//constructor 
			public DListNode(DListNode next, DListNode prev, T item) {
				this.next = next;
				this.prev = prev;
				this.item = item;
			}
			
			//getters
			public T getItem() {
				return item;
			}
			public DListNode getNext() {
				return next;
			}
			public DListNode getPrev() {
				return prev;
			}
			//setters
			public void setNext(DListNode next) {
				this.next = next;
			}
			public void setPrev(DListNode prev) {
				this.prev = prev;
			}
			public void setItem(T item) {
				this.item = item;
			}
		
		} //end DListNode class
	
	//DList Default Constructor
	public DList() {
		size = 0;
		header = new DListNode(null, null, null); //empty header
		trailer = new DListNode(null, null, null); //empty trailer
		header.setNext(trailer); //make header point to trailer
	}
	
	//ListManipulation
	public int size() {
		System.out.println(size);
		return this.size;
	}
	public boolean isEmpty() {
		return size == 0; // if true list is empty
	}
	//return head node
	public DListNode getFirst() throws IllegalStateException {
		if (isEmpty()) throw new IllegalStateException("Error List Is Empty");
			return header.getNext(); //return sentinel next
		}
	
	//return tail node
	public DListNode getLast() throws IllegalStateException {
		if (isEmpty()) throw new IllegalStateException("Error List is Empty"); 
			return trailer.getPrev();
		}
	
	//return previous Node but check if header
	public DListNode getPrevious(DListNode x) {
		if (x == header) throw new IllegalArgumentException("Cannot get item before header");
			return x.getPrev();
		}
	//return previous Node but check if trailer
	public DListNode getNext(DListNode x) {
			if (x == trailer) throw new IllegalArgumentException("Cannot get item after trailer");
				return x.getNext();
			}
	
	//insert Node after selected Node
	public void addAfter(DListNode x, DListNode toAdd) {
		DListNode current = getNext(x);  //store x.next in current variable
		toAdd.setPrev(current); //set new node prev to node after V
		toAdd.setNext(x); //set  new node next to point to V
		x.setPrev(toAdd); //make x prev point to new node
		current.setNext(toAdd); //make current next point to new node //inserted in middle
		this.size++; //increment
	}
	//insert Node before Selected Node
	public void addBefore(DListNode x, DListNode toAdd) {
		DListNode current = x.getPrev(); //store previous in current node
		toAdd.setPrev(x); //set new node previous to point to X
		toAdd.setNext(current); //set new node next to point to X's previous
		current.setPrev(toAdd); //X's previous, previous pointer set to new node
		x.setNext(toAdd); //set X's next pointer to point to new node
		this.size++; //increment
	}
	
	//insert at Head of List--constant time
	public void addFirst(DListNode toAdd) {
		addAfter(header, toAdd);
	}
	//insert at Tail of List--constant time
	public void addLast(DListNode toAdd) {
		addBefore(trailer, toAdd);
	}
	
	//remove node
	public void removeNode(DListNode toRemove) {
		//store this nodes  next  and previous in temp variables
		DListNode prev = getPrevious(toRemove); 
		DListNode next = getNext(toRemove);
		//UnLink Node from List
		next.setPrev(prev);
		prev.setNext(next);
		toRemove.setNext(null);
		toRemove.setPrev(null);
		//decrement
		size--;
	}
	
	//print out List 
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Items in Linked List: [ ");
		//iterate over the list and append each object to sb
		while (header.getNext() != null) {
			DListNode current = header.getNext();
			sb.append(current.getItem());
			sb.append(", ");
		}
		sb.append("  ]");
		String listItems = sb.toString();
		return listItems;
	}
} //end DList Class
	
